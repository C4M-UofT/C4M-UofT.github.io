{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/C4M-UofT/C4M-UofT.github.io/blob/master/notebooks/phase1/session2/phase1session2_homework.ipynb","timestamp":1665092551139}],"collapsed_sections":["B6v86VjQmIrK","IhQvi7z1v6rm","hDWIfFlIwU-P","KO75J5dFwrFH","6TFoiGqDw7cZ","LbURaGgnxL-5","JaiexZJjTnPr","QBFJaXPUmIrV","LQCKVkhjXBMN","9OCg73almIrW","w0gmV_f9yJwu"]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"cells":[{"cell_type":"markdown","metadata":{"id":"B6v86VjQmIrK"},"source":["## Important: Run this code cell each time you start a new session!"]},{"cell_type":"code","metadata":{"id":"CR3MVg81IvWX","jupyter":{"source_hidden":true},"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718597966780,"user_tz":240,"elapsed":201,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}},"outputId":"41054f84-a3c6-4df8-a5b2-d69eb5110f44"},"source":["# Do not edit this cell\n","def test_homework(test_name, actual, expected):\n","  if actual == expected:\n","    print(f\"Test passed: {test_name}.\")\n","    return 1\n","  else:\n","    print(f\"Test failed: {test_name}. Expected {expected}, got {actual}\")\n","    return 0\n","\n","def compare_hw_scores(score, max_score):\n","  if score == max_score:\n","    print(\"All test cases passed!\")\n","  print(f\"Mark: {score} / {max_score}\")\n","\n","print(\"Done!\")"],"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Done!\n"]}]},{"cell_type":"markdown","metadata":{"id":"IhQvi7z1v6rm"},"source":["# Instructions"]},{"cell_type":"markdown","metadata":{"id":"S53yKXI1NEf-"},"source":["Each exercise generally consists of four parts.\n","1.   A description of the function you need to implement\n","2.   Any starter code to help you write your code\n","3.   A separate code block where you can test out various parts of your code\n","4.   An autograder that will evaluate your code against some test cases we have selected"]},{"cell_type":"markdown","metadata":{"id":"8t9e19amwDDn"},"source":["The final cell of this notebook runs all of the test cases in the notebook on all the functions. This cell will not run unless you run the autograder for each exercise first."]},{"cell_type":"markdown","source":["To get full credit for this assignment, we should be able to run your code all the way through the autograder without any errors. To check this, click the text cell ***immediately after*** the final autograder, then go to \"Runtime\" > \"Run before\" in the Google Colab menu."],"metadata":{"id":"FmZhTZTraQGQ"}},{"cell_type":"markdown","metadata":{"id":"hDWIfFlIwU-P"},"source":["# Exercise 1: Multiple of 3"]},{"cell_type":"markdown","source":["Complete the function below to check if the parameter `value` is a multiple of 3.\n","\n","**Hint**: You will probably want the remainder (or modulus) operation, which is represented with the % symbol. Some examples of this operator are provided below:\n","\n","- `5 % 2` is `1`\n","- `14 % 5` is `4`\n","- `4 % 4` is `0`"],"metadata":{"id":"aGwoS2jGPjnK"}},{"cell_type":"code","metadata":{"id":"oSA16VUQwiy_","executionInfo":{"status":"ok","timestamp":1718597967013,"user_tz":240,"elapsed":3,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}}},"source":["def is_multiple_of_3(value):\n","    \"\"\" (int) -> bool\n","\n","    Return True iff value is an integer multiple of 3.\n","\n","    >>> is_multiple_of_3(15)\n","    True\n","    >>> is_multiple_of_3(7)\n","    False\n","    \"\"\"\n","    return value % 3 == 0"],"execution_count":42,"outputs":[]},{"cell_type":"code","metadata":{"id":"T8Xw6CX8wlp6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718597967013,"user_tz":240,"elapsed":3,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}},"outputId":"79efa8eb-ed12-4ee8-bf6f-1f9eabd05232"},"source":["print(is_multiple_of_3(15))\n","print(is_multiple_of_3(7))"],"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n"]}]},{"cell_type":"markdown","metadata":{"id":"KO75J5dFwrFH"},"source":["#### Run hidden code cell to evaluate Exercise 1"]},{"cell_type":"code","metadata":{"id":"AYTOzwNIw4gE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718597967013,"user_tz":240,"elapsed":2,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}},"outputId":"8a482f4f-f04f-44c7-b3ec-12a7f7b864a1"},"source":["# Do not edit this cell\n","def check_exercise1():\n","  ex_score, max_ex_score = 0, 0\n","\n","  ex_score += test_homework(\"15 is a multiple of 3\", is_multiple_of_3(15), True)\n","  max_ex_score += 1\n","  ex_score += test_homework(\"7 is not a multiple of 3\", is_multiple_of_3(8), False)\n","  max_ex_score += 1\n","  ex_score += test_homework(\"11 is not a multiple of 3\", is_multiple_of_3(11), False)\n","  max_ex_score += 1\n","  ex_score += test_homework(\"-3 is a multiple of 3\", is_multiple_of_3(-3), True)\n","  max_ex_score += 1\n","\n","  compare_hw_scores(ex_score, max_ex_score)\n","  return ex_score, max_ex_score\n","\n","_ = check_exercise1()"],"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Test passed: 15 is a multiple of 3.\n","Test passed: 7 is not a multiple of 3.\n","Test passed: 11 is not a multiple of 3.\n","Test passed: -3 is a multiple of 3.\n","All test cases passed!\n","Mark: 4 / 4\n"]}]},{"cell_type":"markdown","metadata":{"id":"6TFoiGqDw7cZ"},"source":["# Exercise 2: Multiple of a Number"]},{"cell_type":"markdown","source":["Complete the function below to check if the parameter `value1` is a multiple of the parameter `value2`."],"metadata":{"id":"CngtzX3XPnRV"}},{"cell_type":"code","metadata":{"id":"KoWE2geFxEkV","executionInfo":{"status":"ok","timestamp":1718597967014,"user_tz":240,"elapsed":3,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}}},"source":["def is_multiple(value1, value2):\n","    \"\"\" (int, int) -> bool\n","\n","    Return True iff value1 is an integer multiple of value2.\n","\n","    >>> is_multiple(15, 3)\n","    True\n","    >>> is_multiple(7, 2)\n","    False\n","    \"\"\"\n","    return value1 % value2 == 0"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"id":"cu4dZTk1xGau","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718597967014,"user_tz":240,"elapsed":3,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}},"outputId":"d5eb5be1-21ef-477b-c00f-c2f1d00eb517"},"source":["print(is_multiple(15, 3))\n","print(is_multiple(7, 2))"],"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n"]}]},{"cell_type":"markdown","metadata":{"id":"LbURaGgnxL-5"},"source":["#### Run hidden code cell to evaluate Exercise 2"]},{"cell_type":"code","metadata":{"id":"eQrVhFprxM09","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718597967976,"user_tz":240,"elapsed":964,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}},"outputId":"2e7cb59c-e44c-4241-bf60-a9202d3b7fe3"},"source":["# Do not edit this cell\n","def check_exercise2():\n","  ex_score, max_ex_score = 0, 0\n","\n","  ex_score += test_homework(\"15 is a multiple of 3\", is_multiple(15, 3), True)\n","  max_ex_score += 1\n","  ex_score += test_homework(\"7 is not a multiple of 2\", is_multiple(7, 2), False)\n","  max_ex_score += 1\n","  ex_score += test_homework(\"-2 is a multiple of 2\", is_multiple(-2, 2), True)\n","  max_ex_score += 1\n","\n","  compare_hw_scores(ex_score, max_ex_score)\n","  return ex_score, max_ex_score\n","\n","_ = check_exercise2()"],"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["Test passed: 15 is a multiple of 3.\n","Test passed: 7 is not a multiple of 2.\n","Test passed: -2 is a multiple of 2.\n","All test cases passed!\n","Mark: 3 / 3\n"]}]},{"cell_type":"markdown","metadata":{"id":"JaiexZJjTnPr"},"source":["# Exercise 3: Fecal Occult Blood Test"]},{"cell_type":"markdown","source":["It is recommended that a focal occult blood test (FOBT) is given once every year for colorectal cancer screening. The patient brings home a kit to do the testing and sends it back to the lab. There are three tests within the kit and each test result is either negative or positive. If all three are negative, the test will be repeated in a year. If at least 1 of the 3 comes back positive, then the patient should be sent for a colonoscopy.\n","\n","Write a function `fobt()` that has three Boolean parameters representing the results of the three tests. We will use `True` to represent a positive test and `False` to represent a negative test. Your function should either return `'Repeat tests in 1 year'` or `'Book for colonoscopy'` according to the test results."],"metadata":{"id":"VrAlGwqVPsnN"}},{"cell_type":"code","metadata":{"id":"fBR-Zz5_T6w2","executionInfo":{"status":"ok","timestamp":1718597967976,"user_tz":240,"elapsed":10,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}}},"source":["# Write your function here, including the docstring\n","def fobt(test1, test2, test3):\n","    \"\"\"\n","    (bool, bool, bool) -> str\n","\n","    Return 'Repeat tests in 1 year' if all three tests are negative.\n","    Return 'Book for colonoscopy' if at least one test is positive.\n","    \"\"\"\n","    if (test1 == False) and (test2 == False) and (test3 == False):\n","      return 'Repeat tests in 1 year'\n","    else:\n","      return 'Book for colonoscopy'"],"execution_count":48,"outputs":[]},{"cell_type":"code","metadata":{"id":"hVnQvxEhT-cR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718597967977,"user_tz":240,"elapsed":11,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}},"outputId":"42cdcefd-5514-4d60-ec80-48e3ec2722d0"},"source":["print(fobt(True, False, False))\n","print(fobt(False, False, False))\n","print(fobt(True, True, False))"],"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Book for colonoscopy\n","Repeat tests in 1 year\n","Book for colonoscopy\n"]}]},{"cell_type":"markdown","metadata":{"id":"QBFJaXPUmIrV"},"source":["#### Run the hidden code cell to evaluate Exercise 3"]},{"cell_type":"code","metadata":{"cellView":"form","id":"LoqPu0ymUJX0","jupyter":{"source_hidden":true},"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718597967977,"user_tz":240,"elapsed":10,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}},"outputId":"9c88a729-64b9-40b3-c962-7161b6c3e012"},"source":["# Do not edit this cell\n","def check_exercise3():\n","  ex_score, max_ex_score = 0, 0\n","\n","  ex_score += test_homework(\"Only first test is positive\", fobt(True, False, False), \"Book for colonoscopy\")\n","  max_ex_score += 1\n","  ex_score += test_homework(\"Only second test is positive\", fobt(False, True, False), \"Book for colonoscopy\")\n","  max_ex_score += 1\n","  ex_score += test_homework(\"All tests are negative\", fobt(False, False, False), \"Repeat tests in 1 year\")\n","  max_ex_score += 1\n","  ex_score += test_homework(\"First and third tests positive\", fobt(False, True, False), \"Book for colonoscopy\")\n","  max_ex_score += 1\n","  ex_score += test_homework(\"All tests are positive\", fobt(True, False, True), \"Book for colonoscopy\")\n","  max_ex_score += 1\n","\n","  compare_hw_scores(ex_score, max_ex_score)\n","  return ex_score, max_ex_score\n","\n","_ = check_exercise3()"],"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["Test passed: Only first test is positive.\n","Test passed: Only second test is positive.\n","Test passed: All tests are negative.\n","Test passed: First and third tests positive.\n","Test passed: All tests are positive.\n","All test cases passed!\n","Mark: 5 / 5\n"]}]},{"cell_type":"markdown","metadata":{"id":"LQCKVkhjXBMN"},"source":["# Exercise 4: Checking String Casing"]},{"cell_type":"markdown","source":["Complete the function below to check if a string contains all uppercase or all lowercase letters."],"metadata":{"id":"ClHyZI1DPyeZ"}},{"cell_type":"code","metadata":{"id":"tzRgF_iyXHas","executionInfo":{"status":"ok","timestamp":1718597967977,"user_tz":240,"elapsed":10,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}}},"source":["def upper_lower(s):\n","    \"\"\" (str) -> bool\n","\n","    Return True if and only if there is at least one alphabetic character in s\n","    and the alphabetic characters in s are either all uppercase or all lowercase.\n","\n","    >>> upper_lower('abc')\n","    True\n","    >>> upper_lower('abcXYZ')\n","    False\n","    >>> upper_lower('XYZ')\n","    True\n","    \"\"\"\n","    # If the string has letters, then its uppercase and lowercase versions\n","    # will be different\n","    contains_alphabetic = s.upper() != s.lower()\n","\n","    # These methods check the casing of all letters\n","    all_upper = s.isupper()\n","    all_lower = s.islower()\n","    return contains_alphabetic and (all_upper or all_lower)"],"execution_count":51,"outputs":[]},{"cell_type":"code","metadata":{"id":"gPPBe6YmXPSH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718597967977,"user_tz":240,"elapsed":9,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}},"outputId":"ff5f9416-a2f4-42e7-a5ea-cee6b51a9d65"},"source":["print(upper_lower('abc'))\n","print(upper_lower('abcXYZ'))\n","print(upper_lower('XYZ'))"],"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n","True\n"]}]},{"cell_type":"markdown","metadata":{"id":"9OCg73almIrW"},"source":["#### Run hidden code cell to evaluate Exercise 4"]},{"cell_type":"code","metadata":{"id":"8HeC-ozmXgpg","jupyter":{"source_hidden":true},"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718597967977,"user_tz":240,"elapsed":9,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}},"outputId":"98a681b0-2aa8-460f-8df9-8f2015a79538"},"source":["# Do not edit this cell\n","def check_exercise4():\n","  ex_score, max_ex_score = 0, 0\n","\n","  ex_score += test_homework(\"All lowercase\", upper_lower('abcdef'), True)\n","  max_ex_score += 1\n","  ex_score += test_homework(\"All uppercase\", upper_lower('ABCDEF'), True)\n","  max_ex_score += 1\n","  ex_score += test_homework(\"Mix of upper and lower\", upper_lower('abcXYZ'), False)\n","  max_ex_score += 1\n","  ex_score += test_homework(\"Mix of letters and non-letters\", upper_lower('XYZ123'), True)\n","  max_ex_score += 1\n","  ex_score += test_homework(\"All numeric\", upper_lower('123'), False)\n","  max_ex_score += 1\n","\n","  compare_hw_scores(ex_score, max_ex_score)\n","  return ex_score, max_ex_score\n","\n","_ = check_exercise4()"],"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Test passed: All lowercase.\n","Test passed: All uppercase.\n","Test passed: Mix of upper and lower.\n","Test passed: Mix of letters and non-letters.\n","Test passed: All numeric.\n","All test cases passed!\n","Mark: 5 / 5\n"]}]},{"cell_type":"markdown","metadata":{"id":"w0gmV_f9yJwu"},"source":["# Homework Completion"]},{"cell_type":"markdown","source":["Please read the instructions below the following code block."],"metadata":{"id":"PoYGTYaaP233"}},{"cell_type":"code","metadata":{"id":"1nPQEMQkuBjr","jupyter":{"source_hidden":true},"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718597967978,"user_tz":240,"elapsed":10,"user":{"displayName":"Alex Mariakakis","userId":"03266759294585342781"}},"outputId":"d681a25c-7186-40a7-ab39-5476986bbf8b"},"source":["# Do not edit this cell\n","hw_score, max_hw_score = 0, 0\n","\n","try:\n","  ex1_score, max_ex1_score = check_exercise1()\n","  hw_score += ex1_score\n","  max_hw_score += max_ex1_score\n","\n","  ex2_score, max_ex2_score = check_exercise2()\n","  hw_score += ex2_score\n","  max_hw_score += max_ex2_score\n","\n","  ex3_score, max_ex3_score = check_exercise3()\n","  hw_score += ex3_score\n","  max_hw_score += max_ex3_score\n","\n","  ex4_score, max_ex4_score = check_exercise4()\n","  hw_score += ex4_score\n","  max_hw_score += max_ex4_score\n","\n","except NameError:\n","  raise Exception(\"Autograder failed to run. You have either not completed all of the exercises or did not run the entire notebook\")\n","\n","compare_hw_scores(hw_score, max_hw_score)"],"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Test passed: 15 is a multiple of 3.\n","Test passed: 7 is not a multiple of 3.\n","Test passed: 11 is not a multiple of 3.\n","Test passed: -3 is a multiple of 3.\n","All test cases passed!\n","Mark: 4 / 4\n","Test passed: 15 is a multiple of 3.\n","Test passed: 7 is not a multiple of 2.\n","Test passed: -2 is a multiple of 2.\n","All test cases passed!\n","Mark: 3 / 3\n","Test passed: Only first test is positive.\n","Test passed: Only second test is positive.\n","Test passed: All tests are negative.\n","Test passed: First and third tests positive.\n","Test passed: All tests are positive.\n","All test cases passed!\n","Mark: 5 / 5\n","Test passed: All lowercase.\n","Test passed: All uppercase.\n","Test passed: Mix of upper and lower.\n","Test passed: Mix of letters and non-letters.\n","Test passed: All numeric.\n","All test cases passed!\n","Mark: 5 / 5\n","All test cases passed!\n","Mark: 17 / 17\n"]}]},{"cell_type":"markdown","source":["To confirm that you've completed all of the exercises and that your notebook is suitable for submission, run the entire notebook from start to finish. You can do this in one of two ways:\n","1.  Select \"Runtime\" > \"Run all\" in the Google Colab menu\n","2. Click inside this cell, then select \"Runtime\" > \"Run before\" in the Google Colab menu."],"metadata":{"id":"mkZtACEovWG-"}}]}