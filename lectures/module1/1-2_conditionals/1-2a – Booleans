{"cells":[{"cell_type":"markdown","metadata":{"id":"feni88jO2L__"},"source":["# Booleans"]},{"cell_type":"markdown","metadata":{"id":"PoBVXHfL3KkZ"},"source":["## What is a Boolean?"]},{"cell_type":"markdown","metadata":{"id":"i2T36GWe4nHD"},"source":["A ***Boolean*** is a data type (`bool`) with one of two possible values: `True` or `False`. \n","\n","Booleans are not strings, so `True` is not the same as `'True'`. Also remember that Python is case-sensitive, so `True` is not the same as `true`."]},{"cell_type":"markdown","metadata":{"id":"lxlTltcd2MAC"},"source":["A ***Boolean expression*** is an expression that evaluates to a Boolean value. Most Boolean expressions involve some sort of comparison between two values. Here are the six most common ***comparison operators***:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"B2BnQgpl2MAE"},"outputs":[],"source":["# Equal to\n","print(5 == 5)\n","print(5 == 4.6)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mnF7LKYX2MAG"},"outputs":[],"source":["# Not equal to\n","print(5 != 5)\n","print(5 != 4.6)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LziQCxkw2MAG"},"outputs":[],"source":["# Less than\n","print(5 < 5)\n","print(5 < 4.6)\n","print(4.6 < 5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ldeQXdM42MAH"},"outputs":[],"source":["# Less than or equal to\n","print(5 <= 5)\n","print(5 <= 4.6)\n","print(4.6 <= 5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QxvdQTP77EHG"},"outputs":[],"source":["# Greater than\n","print(5 > 5)\n","print(5 > 4.6)\n","print(4.6 > 5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9-cEaIw07HbH"},"outputs":[],"source":["# Greater than or equal to\n","print(5 >= 5)\n","print(5 >= 4.6)\n","print(4.6 >= 5)"]},{"cell_type":"markdown","metadata":{"id":"dZQBq8W-2MAJ"},"source":["One of the most common mistakes that new programmers make is that they confuse `=` with `==`. Remember that `=` is an assignment operator, while `==` is a comparison operator."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Zgupx_sf6YCq"},"outputs":[],"source":["5 = 5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RrfEN_aa6aCX"},"outputs":[],"source":["5 == 5"]},{"cell_type":"markdown","metadata":{"id":"lUzMGbVcY66o"},"source":["The `=` assignment operator is not symmetric:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XjuqLWFb7h3i"},"outputs":[],"source":["x = 7"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ayhMjZUg7ltM"},"outputs":[],"source":["7 = x"]},{"cell_type":"markdown","metadata":{"id":"k1oz-u7E7Zds"},"source":["The `==` comparison operator is symmetric (i.e., it does the same thing regardless of which expression is on either side)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XQUHnHj-7PKA"},"outputs":[],"source":["x == 7"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CwqBe1_S7qSS"},"outputs":[],"source":["7 == x"]},{"cell_type":"markdown","metadata":{"id":"039wMoj52MAL"},"source":["## Boolean Operators"]},{"cell_type":"markdown","metadata":{"id":"QR7aK3lY2MAM"},"source":["There are three Boolean ***logical operators***: `not`, `and`, and `or`. These operators can only have operands of type `bool`."]},{"cell_type":"markdown","metadata":{"id":"AcQMvz4s8SYI"},"source":["The `not` operator takes a single operand and returns the opposite of it:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W6l1rjEm2MAN"},"outputs":[],"source":["print(not True)\n","print(not False)"]},{"cell_type":"markdown","metadata":{"id":"wyIX8gtB2MAO"},"source":["The `and` operator evaluates to `True` if and only if both operands are `True`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KY29Gnl32MAP"},"outputs":[],"source":["print(True and True)\n","print(True and False)\n","print(False and True)\n","print(False and False)"]},{"cell_type":"markdown","metadata":{"id":"K2NFfhIZ2MAV"},"source":["The `or` operator evaluates to `True` if and only if at least one operand is `True`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"B8shDYKI2MAV"},"outputs":[],"source":["print(True or True)\n","print(True or False)\n","print(False or True)\n","print(False or False)"]},{"cell_type":"markdown","metadata":{"id":"lKb8xy6i2MAX"},"source":["It is important to note that the boolean operator `or` is not quite the same as how we use the word \"or\" in English. The Boolean operator is an \"inclusive or\", while the English word is usually used as an \"exclusive or\". \n","\n","For example, if you say \"For dessert, I'll have pie or I'll have ice cream\":\n","* In English, it means that you will either have pie or you will have ice cream, not both.\n","* In Python, it means you will have at least one of those two desserts."]},{"cell_type":"markdown","metadata":{"id":"6hn7Nxu92MAX"},"source":["## Operator Precedence"]},{"cell_type":"markdown","metadata":{"id":"SpJuMwpW2MAX"},"source":["Should the following expression evaluate to `True` or `False`?"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ngBHlUEq2MAY"},"outputs":[],"source":["sci_grade = 66\n","math_grade = 83\n","not sci_grade >= 70 or math_grade >= 70"]},{"cell_type":"markdown","metadata":{"id":"jNzxiJD82MAY"},"source":["The order of precedence for Boolean operators is `not`, `and`, and `or`. To make the order clear, we can add parentheses:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vCY5VUYx2MAY"},"outputs":[],"source":["(not sci_grade >= 70) or (math_grade >= 70)"]},{"cell_type":"markdown","metadata":{"id":"DjZ1Tpng2MAZ"},"source":["We can also use parentheses to change the order of operations:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pX_d3wh22MAZ"},"outputs":[],"source":["not ((sci_grade >= 70) or (math_grade >= 70))"]},{"cell_type":"markdown","metadata":{"id":"UkN2o4sYVl8C"},"source":["Just like in math, you can write Boolean expressions that check both the upper and lower bounds of a value:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JZgzk9C-Vmxg"},"outputs":[],"source":["80 < math_grade < 90"]},{"cell_type":"markdown","metadata":{"id":"Gl_Ba3KuWFLP"},"source":["However, this syntax is specific to Python and will either not work or lead to unexpected results in other programming languages. Just in case, you will probably want to get in the habit of writing such expressions as follows:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DU4c8NK8Vxk-"},"outputs":[],"source":["(math_grade > 80) and (math_grade < 90)"]},{"cell_type":"markdown","metadata":{"id":"q6LFxgTG2MAa"},"source":["## Practice Exercise: Exclusive Or\n","\n","Recall that the `or` operator in Python is inclusive rather than exclusive. Let's say that we want to write function that acts as an \"exclusive or\". Given Boolean variables for `pie` and `ice_cream`, complete this function using a Boolean expression that evaluates to `True` if and only if exactly one of `pie` and `ice_cream` is `True`.\n","\n","**Hint:** There are two situations when this should be `True`: \n","1. The person has pie but not ice cream\n","2. The person has ice cream but not pie\n","\n","Write expressions for each of these situations, then combine them to create the overall expression. "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"stZsJ3q3AP6Y"},"outputs":[],"source":["def check_one_dessert(pie, ice_cream):\n","    \"\"\"\n","    Returns True if and only if exactly one of pie and ice_cream is True\n","    \"\"\"\n","    # TODO: Write your expression here"]},{"cell_type":"code","source":["# Test your function here"],"metadata":{"id":"hPpL1mxnLBiT"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"https://github.com/C4M-UofT/C4M-UofT.github.io/blob/master/notebooks/phase1/session2/booleans.ipynb","timestamp":1665003495187},{"file_id":"https://github.com/C4M-UofT/C4M-UofT.github.io/blob/master/notebooks/booleans.ipynb","timestamp":1629149030871}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.13"}},"nbformat":4,"nbformat_minor":0}