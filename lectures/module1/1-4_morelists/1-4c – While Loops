{"cells":[{"cell_type":"markdown","metadata":{"id":"FI_0E7avPe-b"},"source":["# `while` Loop"]},{"cell_type":"markdown","metadata":{"id":"oxHh4h6E-Df5"},"source":["## What Is a `while` Loop?"]},{"cell_type":"markdown","metadata":{"id":"z88vMnJsPe-h"},"source":["A ***`while` loop*** is another kind of loop that allows you to run code multiple times with slight variations in each iteration."]},{"cell_type":"markdown","metadata":{"id":"Nc0wNfWk-QUH"},"source":["A `while` loop has this general form:\n","\n","        while <<condition>>:\n","            <<body>>\n","\n","The `while` loop consists of the following keywords and expressions:\n","* `body`: The code that you want to run repeatedly\n","* `condition`: An boolean statement that dictates how many times your loop operates\n","\n","       "]},{"cell_type":"markdown","metadata":{"id":"VQ12tK1d-o3I"},"source":["In other words, the `while` loop checks whether the condition is `True`. If it is, it executes the body of the loop and goes back to check the condition again; if it is not `True`, the loop is done. \n","\n","Even if the condition becomes false during the body of the loop, the loop does not stop at that moment. The only time the program decides whether to continue or stop is when the loop header is reached."]},{"cell_type":"markdown","metadata":{"id":"L9eAW5lKPe-k"},"source":["## First Example of a `while` Loop"]},{"cell_type":"markdown","source":["Let's look at a basic example of a `while` loop:"],"metadata":{"id":"4MGtTl3V3bfM"}},{"cell_type":"code","source":["counter = 0\n","while counter < 100:\n","    counter = counter + 15\n","    print(counter)"],"metadata":{"id":"QV8azX0-3cM1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Notice how this code block printed a number above `100` despite the fact that the condition checks whether or not `counter < 100`. This is because the condition is only checked at the start of each iteration. Since `90 < 100`, the loop executed one more time and printed `90 + 15 = 105`, after which the loop finished."],"metadata":{"id":"Dn_TTa__383W"}},{"cell_type":"markdown","metadata":{"id":"vKMRPTUmPe-2"},"source":["## Practice Exercise: Checking for Valid Input"]},{"cell_type":"markdown","source":["Write code that asks a user to enter either `'yes'` or `'no'` and keeps looping until the user enters one of these two options."],"metadata":{"id":"l9boiT_E5P0f"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"fkii2Gy2BYCE"},"outputs":[],"source":["# Write your code here"]},{"cell_type":"markdown","metadata":{"id":"Jy3sgGS4Pe-2"},"source":["## Practice Exercise: A Better Guessing Game"]},{"cell_type":"markdown","metadata":{"id":"64dNf8BkPe-3"},"source":["In a previous session, we wrote code to guess a number.  If the user guessed wrong, we reported `Too high`, `Too low`, or `You got it`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bUTWk4txPe-6"},"outputs":[],"source":["# Generate a random integer between 1 and 10\n","import random\n","secret = random.randint(1, 10)\n","\n","# Ask the user to guess a number\n","guess = int(input('Enter a number between 1 and 10: '))\n","\n","# Check if the number is correct\n","if guess == secret:\n","    print('You got it')\n","elif guess > secret:\n","    print('Too high')\n","else:\n","    print('Too low')"]},{"cell_type":"markdown","metadata":{"id":"AsW3K_adPe-7"},"source":["Rather than having the user guess only once, write a new version that prompts the user to guess until they guess the correct number."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cUn5YrwB_gm8"},"outputs":[],"source":["# Write your code here"]},{"cell_type":"markdown","source":["## Converting `for` to `while`"],"metadata":{"id":"hKCg53u93cnn"}},{"cell_type":"markdown","metadata":{"id":"brf4EeP8EFqX"},"source":["Let's say we have a list of daily heart rates for a patient and we want to report the first day when their heart rate was elevated above 100."]},{"cell_type":"markdown","source":["We could do this with a `for` loop as follows."],"metadata":{"id":"sq0mN1Q5p8Pr"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"O1DyCVGVEFQ8"},"outputs":[],"source":["heart_rates = [75, 60, 80, 90, 105, 85]\n","\n","for i in range(len(heart_rates)):\n","    if heart_rates[i] > 100:\n","        print('Elevated on day:', i)\n","        break"]},{"cell_type":"markdown","metadata":{"id":"TO7CX5eYHnxM"},"source":["There are lots of ways of converting this into a `while` loop. Here are two different versions that provide the same results:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pzFvWe4_IlFu"},"outputs":[],"source":["heart_rates = [75, 60, 80, 90, 105, 85]\n","\n","n_days = 0\n","while n_days < len(heart_rates):\n","    if heart_rates[n_days] > 100:\n","        print('Elevated on day:', n_days)   \n","        break\n","    n_days += 1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gLxuu-4hPe-l"},"outputs":[],"source":["heart_rates = [75, 60, 80, 90, 105, 85]\n","\n","n_days = 0\n","while heart_rates[n_days] < 100:\n","    n_days += 1\n","\n","print('Elevated on day:', n_days)    "]},{"cell_type":"markdown","metadata":{"id":"WTUsSZwRDtPs"},"source":["Let's use the Python Visualizer to trace [the second version](https://pythontutor.com/csc108h.html#code=heart_rates%20%3D%20%5B75,%2060,%2080,%2090,%20105,%2085%5D%0A%0An_days%20%3D%200%0Awhile%20heart_rates%5Bn_days%5D%20%3C%20100%3A%0A%20%20%20%20n_days%20%2B%3D%201%0A%0Aprint%28'Elevated%20on%20day%3A',%20n_days%29%20%20%20%20&curInstr=0&mode=display&origin=csc108h.js&py=3&rawInputLstJSON=%5B%5D)."]},{"cell_type":"markdown","metadata":{"id":"4RQDjKTfLYgI"},"source":["So why would you use a `while` loop instead of a `for` loop? In general, `for` loops are preferred when you can calculate how many iterations your code will need to run. On the other hand, a `while` loop is better for when you need your code once a specific condition is met."]},{"cell_type":"markdown","metadata":{"id":"DUNlBMdYPe-u"},"source":["## Edge Cases and Lazy Evaluation\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"rTEtSc1bPe-t"},"source":["Both of the previous `while` loops work if there is at least one value that is greater than 100, but what happens if all of the values are below 100? Let's revisit the loops with a different value for `heart_rates`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bvBMEg1bKTCf"},"outputs":[],"source":["heart_rates = [75, 60, 80, 90, 95, 85]\n","\n","n_days = 0\n","while n_days < len(heart_rates):\n","    if heart_rates[n_days] > 100:\n","        print('Elevated on day:', n_days)   \n","        break\n","    n_days += 1"]},{"cell_type":"markdown","metadata":{"id":"ROpf2a2jKe4u"},"source":["This first example works fine because we eventually fail the condition at the loop header and the code exits without printing anything."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UNM60wfHKbj1"},"outputs":[],"source":["heart_rates = [75, 60, 80, 90, 95, 85]\n","\n","n_days = 0\n","while heart_rates[n_days] < 100:\n","    n_days += 1\n","\n","print('Elevated on day:', n_days)    "]},{"cell_type":"markdown","metadata":{"id":"7nfeF9eLKnwr"},"source":["Here, on the other hand, `n_days` becomes an index that exceeds the length of the array `heart_rates`, which causes an error to appear. This particular issue can be solved by either adding a `break` statement or an additional condition to the loop header. Let us look at how to do the latter:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5aufIOv-LjHK"},"outputs":[],"source":["heart_rates = [75, 60, 80, 90, 95, 85]\n","\n","n_days = 0\n","while n_days < len(heart_rates) and heart_rates[n_days] < 100:\n","    n_days += 1\n","\n","print('Elevated on day:', n_days)    "]},{"cell_type":"markdown","metadata":{"id":"RMVEqwTEN4eW"},"source":["The order of the conditions matters. If you flip them around, you get the same error as before:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N0eokg85N8Ar"},"outputs":[],"source":["heart_rates = [75, 60, 80, 90, 95, 85]\n","\n","n_days = 0\n","while heart_rates[n_days] < 100 and n_days < len(heart_rates):\n","    n_days += 1\n","\n","print('Elevated on day:', n_days)    "]},{"cell_type":"markdown","metadata":{"id":"v90eEWgfPe-1"},"source":["In Python, the second operand of a conditional statement with the `and` operator is not evaluated when the first operand is `False`. This is a handy way of checking that high-level assumptions are being met before you check for specific conditions in your loops."]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"https://github.com/C4M-UofT/C4M-UofT.github.io/blob/master/notebooks/phase1/session4/while.ipynb","timestamp":1665082520324},{"file_id":"https://github.com/C4M-UofT/C4M-UofT.github.io/blob/master/notebooks/while.ipynb","timestamp":1631672448748}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.13"}},"nbformat":4,"nbformat_minor":0}