{"cells":[{"cell_type":"markdown","metadata":{"id":"sk41LkYcPdkG"},"source":["# Parallel Sequences"]},{"cell_type":"markdown","metadata":{"id":"OZnd7Hp6wPfE"},"source":["## Parallel Lists"]},{"cell_type":"markdown","metadata":{"id":"U-F_t3dqwRd2"},"source":["There might be times when you want to keep track of multiple things for the same object, almost like columns in a spreadsheet. You can do this with ***parallel lists*** that have the same length."]},{"cell_type":"markdown","metadata":{"id":"LP3VW7OfwhmZ"},"source":["For example, you could use the following set of lists to capture the gender of each patient, the ward in which they were admitted, and the duration of their stay:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"01-ySmVYwoDY"},"outputs":[],"source":["sex_data = [\"m\", \"f\", \"f\", \"m\", \"m\", \"f\"]\n","ward_data = [1, 3, 2, 2, 1, 2] \n","duration_data = [10, 5, 7, 2, 3, 4]"]},{"cell_type":"markdown","metadata":{"id":"ktx6KDCpw1GU"},"source":["In this example, \n","* The first patient was male and stayed in Ward 1 for 10 hours\n","* The second patient was female and stayed in Ward 3 for 5 hours\n","* ..."]},{"cell_type":"markdown","metadata":{"id":"b6RT4UbVxKlq"},"source":["When we process these lists, we can access data using the same index to make sure we get the right information for each person:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fSGFL1o-xR2M"},"outputs":[],"source":["patient1_sex = sex_data[0]\n","patient1_ward = ward_data[0]\n","patient1_duration = duration_data[0]"]},{"cell_type":"markdown","metadata":{"id":"hgMgHRtfxfvM"},"source":["## Comparing Lists"]},{"cell_type":"markdown","metadata":{"id":"ZZMwZZjNPdkS"},"source":["Let's write a function that compares two lists to see whether they are the same. "]},{"cell_type":"markdown","metadata":{"id":"XILuo-n9xkjU"},"source":["We will want to check two things:\n","1. Are the lists the same length?\n","2. Are the items at corresponding positions the same? (i.e., `L1[0] == L2[0]`, `L1[1] == L2[1]`, etc.)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"onibWoXdPdkV"},"outputs":[],"source":["def lists_equal(L1, L2):\n","    \"\"\" (list of int, list of int) -> bool\n","    \n","    Return True iff L1 and L2 have the same contents in the same locations.\n","    \n","    >>> lists_equal([1, 2, 3, 4], [1, 2, 3, 4])\n","    True\n","    >>> lists_equal([8, 3, 4], [8, 3, 4, 10, 2])\n","    False\n","    >>> lists_equal([5, 6, 7], [7, 6, 5])\n","    False\n","    \"\"\" \n","    \n","    # Check whether the two lists have the same length first, \n","    # to avoid index out of range errors later.\n","    if len(L1) != len(L2):\n","        return False\n","    \n","    for i in range(len(L1)):\n","        if L1[i] != L2[i]:\n","            return False\n","        \n","    return True\n","    "]},{"cell_type":"markdown","metadata":{"id":"fYHh_O-XPdkX"},"source":["## Practice Exercise: Comparing Strings"]},{"cell_type":"markdown","source":["Recall that a string is basically a `list` of characters, so let's use the principles we just discussed to compare two strings."],"metadata":{"id":"RSNyAnJswjj9"}},{"cell_type":"markdown","source":["Python has a method called `startswith()` that allows you to check if a string starts with a sequence of characters. For example:"],"metadata":{"id":"2VEgQSqizW9v"}},{"cell_type":"code","source":["'abc'.startswith('ab')"],"metadata":{"id":"ASPqn6zfw4fI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'ad'.startswith('ab')"],"metadata":{"id":"CMDyPZnLxVsW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'ab'.startswith('abc')"],"metadata":{"id":"nW_wgCMlxbFz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a function that achieves the same functionality using a loop rather than the `startswith()` method. "],"metadata":{"id":"9lRMYHkExUFu"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"e20jF3djPdkY"},"outputs":[],"source":["def manual_starts_with(s1, s2):\n","    \"\"\" (str, str) -> bool\n","    \n","    Return True iff the string s1 starts with the string s2.\n","    \n","    >>> manual_starts_with(\"abc\", \"ab\")\n","    True\n","    >>> manual_starts_with(\"ad\", \"ab\")\n","    False\n","    >>> manual_starts_with(\"ab\", \"abc\")\n","    False\n","    \"\"\"\n","    # Write your code here"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GcNNPvMYuJmA"},"outputs":[],"source":["manual_starts_with(\"abc\", \"ab\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wrjQi-bxuMbq"},"outputs":[],"source":["manual_starts_with(\"ad\", \"ab\")"]},{"cell_type":"code","source":["manual_starts_with(\"ab\", \"abc\")"],"metadata":{"id":"CIU7KCRJx7Ts"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EA7T0IzgPdkW"},"source":["## Practice Exercise: Parallel Iteration and Accumulation"]},{"cell_type":"markdown","source":["Write a function that counts the number of people of a given sex in a given ward:"],"metadata":{"id":"fttAgtb6wJyv"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"ngEuuUXTPdkX"},"outputs":[],"source":["def num_stay(sex, ward, sex_data, ward_data, duration_data):\n","    \"\"\" (str, int, list of int, list of str, list of int) -> int\n","    \n","    Return the number of patients of sex sex in ward ward,\n","    given parallel list of sexes sex_data, list of wards ward_data, and \n","    list of duration of stay duration_data.\n","    \n","    >>> sex_data =       [\"m\", \"f\", \"f\", \"m\", \"m\", \"f\"]\n","    >>> ward_data =      [  1,   3,   2,   2,   1,   2] \n","    >>> duration_data =  [ 10,   5,   7,   2,   3,   4]\n","    >>> num_stay('f', 2, sex_data, ward_data, duration_data)\n","    2\n","    >>> num_stay('f', 3, sex_data, ward_data, duration_data)\n","    1\n","    \"\"\"\n","    # Write your code here"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z8kG-gXRyF6M"},"outputs":[],"source":["sex_data = [\"m\", \"f\", \"f\", \"m\", \"m\", \"f\"]\n","ward_data = [1, 3, 2, 2, 1, 2] \n","duration_data = [10, 5, 7, 2, 3, 4]"]},{"cell_type":"code","source":["num_stay('f', 2, sex_data, ward_data, duration_data)"],"metadata":{"id":"_aSrH3wi0aEJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num_stay('f', 3, sex_data, ward_data, duration_data)"],"metadata":{"id":"XYajY7xA0ZZb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Now write a very similar function that computes the average length of stay in the hospital for a given sex in a given ward. You are free to borrow from the code you used for the previous function."],"metadata":{"id":"UjpCzM2rzv7b"}},{"cell_type":"code","source":["def avg_stay(sex, ward, sex_data, ward_data, duration_data):\n","    \"\"\" (str, int, list of int, list of str, list of int) -> float\n","    \n","    Return the average duration of stay for patients of sex sex in ward ward,\n","    given parallel list of sexes sex_data, list of wards ward_data, and \n","    list of duration of stay duration_data.\n","    \n","    >>> sex_data =       [\"m\", \"f\", \"f\", \"m\", \"m\", \"f\"]\n","    >>> ward_data =      [  1,   3,   2,   2,   1,   2] \n","    >>> duration_data =  [ 10,   5,   7,   2,   3,   4]\n","    >>> avg_stay('f', 2, sex_data, ward_data, duration_data)\n","    5.5\n","    >>> avg_stay('f', 3, sex_data, ward_data, duration_data)\n","    5\n","    \"\"\"\n","    # Write your code here"],"metadata":{"id":"bk6UAn3dzy4d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["avg_stay('f', 2, sex_data, ward_data, duration_data)"],"metadata":{"id":"ziAYRnL80ex0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["avg_stay('f', 3, sex_data, ward_data, duration_data)"],"metadata":{"id":"HagKv28T0gS8"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"https://github.com/C4M-UofT/C4M-UofT.github.io/blob/master/notebooks/phase1/session4/parallel.ipynb","timestamp":1665082506059},{"file_id":"https://github.com/C4M-UofT/C4M-UofT.github.io/blob/master/notebooks/parallel.ipynb","timestamp":1631672438400}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.13"}},"nbformat":4,"nbformat_minor":0}